# [language-server]
# vscode-css-language-server = { command = "vscode-css-languageserver", args = ["--stdio"], config = { provideFormatter = true, css = { validate = { enable = true } } } }
# vscode-html-language-server = { command = "vscode-html-languageserver", args = ["--stdio"], config = { provideFormatter = true } }
# vscode-json-language-server = { command = "vscode-json-languageserver", args = ["--stdio"], config = { provideFormatter = true, json = { validate = { enable = true } } } }

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false
check.command = "clippy"

[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rs|rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
shebangs = ["rust-script", "cargo"]
auto-format = true
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = [
  { start = "/*", end = "*/" },
  { start = "/**", end = "*/" },
  { start = "/*!", end = "*/" },
]
language-servers = [ "rust-analyzer" ]
indent = { tab-width = 4, unit = "    " }
persistent-diagnostic-sources = ["rustc", "clippy"]

# [[grammar]]
# name = "rust"
# source = { git = "https://github.com/tree-sitter/tree-sitter-rust", rev = "9c84af007b0f144954adb26b3f336495cbb320a7" }
 
# [language-server.rust-analyzer.config]
# check.command = "clippy"


[language-server.astro-ls]
command = "astro-ls"
args = ["--stdio"]
config = { "typescript" = { "tsdk" = "/Users/marivas/Library/pnpm/global/5/node_modules/typescript/lib" }, "environment" = "node" }


[[language]]
name = "astro"
scope = "source.astro"
injection-regex = "astro"
file-types = ["astro"]
roots = ["package.json", "astro.config.mjs"]
language-servers = ["astro-ls"]




# [[language]]
# name = "python"
# scope = "source.python"
# injection-regex = "py(thon)?"
# file-types = ["py", "pyi", "py3", "pyw", "ptl", "rpy", "cpy", "ipy", "pyt", { glob = ".python_history" }, { glob = ".pythonstartup" }, { glob = ".pythonrc" }, { glob = "SConstruct" }, { glob = "SConscript" }]
# shebangs = ["python", "uv"]
# roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json"]
# comment-token = "#"
# language-servers = ["ruff", "pyright"]
# # language-servers = ["ruff", "jedi", "pylsp"]
# # TODO: pyls needs utf-8 offsets
# indent = { tab-width = 4, unit = "    " }


[[language]]
name = "markdown"
file-types = [
  "qmd",
  "md",
  "markdown",
  "mkd",
  "mkdn",
  "mdwn",
  "mdown",
  "markdn",
  "mdtxt",
  "mdtext",
  "workbook",
  { glob = "PULLREQ_EDITMSG" },
]

########################################
# LANGUAGE: PYTHON
#########################################
[[language]]
name = "python"
scope = "source.python"
injection-regex = "py(thon)?"
language-id = "python"
auto-format = true
# language-servers = ["basedpyright", "ruff", "scls"]
language-servers = ["basedpyright", "ruff"]
formatter = { command = "ruff", args = ["format", "-"] }
file-types = ["py", "pyi", "py3", "pyw", "ptl", "rpy", "cpy", "ipy", "pyt", { glob = ".python_history" }, { glob = ".pythonstartup" }, { glob = ".pythonrc" }, { glob = "SConstruct" }, { glob = "SConscript" }]
comment-token = "#"
shebangs = ["python", "uv"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", ".git", ".jj", ".venv/"]

########################################
# https://docs.basedpyright.com/latest/configuration/language-server-settings/
########################################
[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]
config.reportMissingtypeStubs = false
except-features = ["format"]

[language-server.basedpyright.config.basedpyright.analysis]
autoSearchPaths = true
diagnosticMode = "workspace"  # "openFilesOnly"
useLibraryCodeForTypes = true
autoImportCompletions = true
typeCheckingMode = "standard" #"recommended"
disableTaggedHints = true


# ########################################
# # https://docs.astral.sh/ruff/settings
# ########################################

[language-server.ruff]
command = "ruff"
args = ["server", "--preview"]
preview = true
show-fixes = true
include = ["*.py"]
fix = true                     # TODO 

[language-server.ruff.config.settings]
lineLength = 100
logLevel = "debug"

[language-server.ruff.analyze]
detect-string-imports = true

[language-server.ruff.lint.pydocstyle]
convention = "google"

[language-server.ruff.config.settings.lint]
select = [
  "E",
  "F",
  "W",
  "B",
  "I",
  "RUF",
  "N",
  "SIM",
  "LOG",
  "ERA",
  "W",
  "D",
  "UP",
  "ANN",
  "ASYNC",
  "S",
  "RET",
  "TCH",
  "ARG",
  "PTH",
  "DOC",
]
preview = true



[language-server.ruff.config.settings.format]
preview = true
quote-style = "double"
docstring-code-format = true
indent-style = "space"
skip-magic-trailing-comma = true

########################################
# Snippets
#########################################

[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)
